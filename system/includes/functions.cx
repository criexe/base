<?php


/**
 * @param null $alias
 * @param null $value
 *
 * @return array|bool
 */
function _config($alias = null, $value = null, $host = null)
{
    try
    {
        global $config;

        if($host == null) $host = $_SERVER['HTTP_HOST'];

        if(!array_key_exists($host, $config)) $config[$host] = [];

        if($alias == null && $value == null)
        {
            return $config;
        }
        else if($alias != null && $value == null)
        {
            if(!array_key_exists($alias, $config[$host])) return false;
            return $config[$host][$alias];
        }
        else if($alias != null && $value != null)
        {
            if(is_array($value) && array_key_exists($alias, $config[$host]))
            {
                $current_data = $config[$host][$alias];
                $new_data     = $value;
                $new_array    = array_merge($current_data, $new_data);

                $config[$host][$alias] = $new_array;
            }
            else
            {
                $config[$host][$alias] = $value;
            }
            return $config;
        }
        else
        {
            return $config;
        }
    }
    catch(Exception $e)
    {
        return false;
    }
}


/**
 * @param null  $name
 * @param null  $datas
 * @param array $params
 *
 * @return bool|string
 */
function _render($name = null, $datas = null, array $params = [])
{
    global $files;

    try
    {
        $emoji = new emoji();

        if($name == null)
        {
            throw_exception('View file name can\'t empty.');
        }
        else
        {
            sys::array_key_default_value($params, 'ext'        , 'view');
            sys::array_key_default_value($params, 'layout'     ,  false);
            sys::array_key_default_value($params, 'is_content' ,  true);
            sys::array_key_default_value($params, 'emoji'      ,  true);

            // View content is a string
            // Ex : ['VIEW CONTENT']
            $is_view_array = is_array($name) && count($name) == 1;

            if( ! $is_view_array)
            {
                $all_views = $files[$params['ext']];
                $found     = preg_grep("%" . $name . "\." . $params['ext'] . "(?:\.php)?$%si", $all_views);
                $found     = array_values($found);
            }
            else
            {
                // count($found) > 0
                $found = [true, true];

            }

            if(count($found) > 0)
            {
                // Data Variables
                if($datas != null)
                    foreach($datas as $k => $v)
                        $$k = $v;

                if( ! $is_view_array)
                {
                    $view_file = $found[0];

                    ob_start();
                    include $view_file;
                    $content = ob_get_contents();
                }
                else
                {
                    $content = $name[0];
                }

                // Emoji
                if($params['emoji'] === true)
                {
                    $content = $emoji->to_image($content);
                    $content = preg_replace('#<title>(.*?)</title>#si', '<title>' . cx::title() . '</title>', $content);
                }

                // Image - Add Alt Tags
                $content = utils::images_add_alt_tags($content);


                if($params['is_content'] === true) cx::data('layout_content', $content);
                if( ! $is_view_array) ob_end_clean();

                if(!array_key_exists('layout', $params) || $params['layout'] == false)
                {
                    return $content;
                }
                else
                {
                    ob_start();
                    $layout_file = sys::find_layout($params['layout']);
                    include $layout_file;

                    $layout_content = ob_get_contents();
                    ob_end_clean();

                    return $layout_content;
                }
            }
        }
    }
    catch(Exception $e)
    {
        logger::add('view(): ' . $e->getMessage(), 'render');
        return false;
    }
}


function _date($format = null, $time = null)
{
    $lang = strtolower(lang::current());
    $date = date($format, $time);
    $old  = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    $new  = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    if($lang == 'tr' || $lang == 'tr_tr')
    {
        $new = ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'];
    }

    return str_replace($old, $new, $date);
}


function _pagination($params = [])
{
    if(!is_array($params)) return false;
    sys::specify_params($params, ['total', 'active', 'limit', 'var']);

    $params['total_page'] = ceil($params['total'] / $params['limit']);

    return _render('system/app/views/sys/pagination', $params);
}


function _data($alias = null, $data = null)
{
    global $datas;

    if($alias == null) return $datas;

    // GET
    if($data == null)
    {
        sys::array_key_default_value($datas, $alias, null);
        return $datas[$alias];
    }

    // SET
    else
    {
        $datas[$alias] = $data;
        return $data;
    }
}



function _log($data = null, $file = null, $options = [])
{
    sys::array_key_default_value($options, 'date', true);
    sys::array_key_default_value($options, 'ext', '.log');
    sys::array_key_default_value($options, 'filename', 'log-' . date('d-m-Y'));
    sys::array_key_default_value($options, 'folder', date('m-Y'));

    if($options['date'] === false)
    {
        $insert_data = $data;
    }
    else
    {
        $date = _date(_config('date.pattern'));
        $insert_data = "[{$date}] {$data}";
    }

    if($file == null) $file = 'logs';

    sys::write([
        // 'file' => LOGS_PATH . DS . 'logs.log',
        'file' => LOGS_PATH . DS . $file . $options['ext'],
        'data' => $insert_data . "\n"
    ]);

    cx::counter("log.$file", 1);

    return $insert_data . "\n";
}



function _css($url = null)
{
    if($url == null) return false;
    if(_config('cache.version')) $url .= '?' . _config('cache.version');

    return '<link rel="stylesheet" href="' . $url . '">';
}

function _js($url = null)
{
    if($url == null) return false;
    if(_config('cache.version')) $url .= '?' . _config('cache.version');

    return '<script src="' . $url . '" type="text/javascript"></script>';
}


function _slugify($str, $options = array())
{
    $str      = mb_convert_encoding((string)$str, 'UTF-8', mb_list_encodings());
    $defaults = [

        'delimiter'     => '-',
        'limit'         => null,
        'lowercase'     => true,
        'replacements'  => array(),
        'transliterate' => true
    ];
    $options = array_merge($defaults, $options);

    $char_map = [
        // Latin
        'À' => 'A', 'Á' => 'A', 'Â' => 'A', 'Ã' => 'A', 'Ä' => 'A', 'Å' => 'A', 'Æ' => 'AE', 'Ç' => 'C',
        'È' => 'E', 'É' => 'E', 'Ê' => 'E', 'Ë' => 'E', 'Ì' => 'I', 'Í' => 'I', 'Î' => 'I', 'Ï' => 'I',
        'Ð' => 'D', 'Ñ' => 'N', 'Ò' => 'O', 'Ó' => 'O', 'Ô' => 'O', 'Õ' => 'O', 'Ö' => 'O', 'Ő' => 'O',
        'Ø' => 'O', 'Ù' => 'U', 'Ú' => 'U', 'Û' => 'U', 'Ü' => 'U', 'Ű' => 'U', 'Ý' => 'Y', 'Þ' => 'TH',
        'ß' => 'ss',
        'à' => 'a', 'á' => 'a', 'â' => 'a', 'ã' => 'a', 'ä' => 'a', 'å' => 'a', 'æ' => 'ae', 'ç' => 'c',
        'è' => 'e', 'é' => 'e', 'ê' => 'e', 'ë' => 'e', 'ì' => 'i', 'í' => 'i', 'î' => 'i', 'ï' => 'i',
        'ð' => 'd', 'ñ' => 'n', 'ò' => 'o', 'ó' => 'o', 'ô' => 'o', 'õ' => 'o', 'ö' => 'o', 'ő' => 'o',
        'ø' => 'o', 'ù' => 'u', 'ú' => 'u', 'û' => 'u', 'ü' => 'u', 'ű' => 'u', 'ý' => 'y', 'þ' => 'th',
        'ÿ' => 'y',
        // Latin symbols
        '©' => '(c)',
        // Greek
        'Α' => 'A', 'Β' => 'B', 'Γ' => 'G', 'Δ' => 'D', 'Ε' => 'E', 'Ζ' => 'Z', 'Η' => 'H', 'Θ' => '8',
        'Ι' => 'I', 'Κ' => 'K', 'Λ' => 'L', 'Μ' => 'M', 'Ν' => 'N', 'Ξ' => '3', 'Ο' => 'O', 'Π' => 'P',
        'Ρ' => 'R', 'Σ' => 'S', 'Τ' => 'T', 'Υ' => 'Y', 'Φ' => 'F', 'Χ' => 'X', 'Ψ' => 'PS', 'Ω' => 'W',
        'Ά' => 'A', 'Έ' => 'E', 'Ί' => 'I', 'Ό' => 'O', 'Ύ' => 'Y', 'Ή' => 'H', 'Ώ' => 'W', 'Ϊ' => 'I',
        'Ϋ' => 'Y',
        'α' => 'a', 'β' => 'b', 'γ' => 'g', 'δ' => 'd', 'ε' => 'e', 'ζ' => 'z', 'η' => 'h', 'θ' => '8',
        'ι' => 'i', 'κ' => 'k', 'λ' => 'l', 'μ' => 'm', 'ν' => 'n', 'ξ' => '3', 'ο' => 'o', 'π' => 'p',
        'ρ' => 'r', 'σ' => 's', 'τ' => 't', 'υ' => 'y', 'φ' => 'f', 'χ' => 'x', 'ψ' => 'ps', 'ω' => 'w',
        'ά' => 'a', 'έ' => 'e', 'ί' => 'i', 'ό' => 'o', 'ύ' => 'y', 'ή' => 'h', 'ώ' => 'w', 'ς' => 's',
        'ϊ' => 'i', 'ΰ' => 'y', 'ϋ' => 'y', 'ΐ' => 'i',
        // Turkish
        'Ş' => 'S', 'İ' => 'I', 'Ç' => 'C', 'Ü' => 'U', 'Ö' => 'O', 'Ğ' => 'G',
        'ş' => 's', 'ı' => 'i', 'ç' => 'c', 'ü' => 'u', 'ö' => 'o', 'ğ' => 'g',
        // Russian
        'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'G', 'Д' => 'D', 'Е' => 'E', 'Ё' => 'Yo', 'Ж' => 'Zh',
        'З' => 'Z', 'И' => 'I', 'Й' => 'J', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O',
        'П' => 'P', 'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'H', 'Ц' => 'C',
        'Ч' => 'Ch', 'Ш' => 'Sh', 'Щ' => 'Sh', 'Ъ' => '', 'Ы' => 'Y', 'Ь' => '', 'Э' => 'E', 'Ю' => 'Yu',
        'Я' => 'Ya',
        'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'yo', 'ж' => 'zh',
        'з' => 'z', 'и' => 'i', 'й' => 'j', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o',
        'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'c',
        'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sh', 'ъ' => '', 'ы' => 'y', 'ь' => '', 'э' => 'e', 'ю' => 'yu',
        'я' => 'ya',
        // Ukrainian
        'Є' => 'Ye', 'І' => 'I', 'Ї' => 'Yi', 'Ґ' => 'G',
        'є' => 'ye', 'і' => 'i', 'ї' => 'yi', 'ґ' => 'g',
        // Czech
        'Č' => 'C', 'Ď' => 'D', 'Ě' => 'E', 'Ň' => 'N', 'Ř' => 'R', 'Š' => 'S', 'Ť' => 'T', 'Ů' => 'U',
        'Ž' => 'Z',
        'č' => 'c', 'ď' => 'd', 'ě' => 'e', 'ň' => 'n', 'ř' => 'r', 'š' => 's', 'ť' => 't', 'ů' => 'u',
        'ž' => 'z',
        // Polish
        'Ą' => 'A', 'Ć' => 'C', 'Ę' => 'e', 'Ł' => 'L', 'Ń' => 'N', 'Ó' => 'o', 'Ś' => 'S', 'Ź' => 'Z',
        'Ż' => 'Z',
        'ą' => 'a', 'ć' => 'c', 'ę' => 'e', 'ł' => 'l', 'ń' => 'n', 'ó' => 'o', 'ś' => 's', 'ź' => 'z',
        'ż' => 'z',
        // Latvian
        'Ā' => 'A', 'Č' => 'C', 'Ē' => 'E', 'Ģ' => 'G', 'Ī' => 'i', 'Ķ' => 'k', 'Ļ' => 'L', 'Ņ' => 'N',
        'Š' => 'S', 'Ū' => 'u', 'Ž' => 'Z',
        'ā' => 'a', 'č' => 'c', 'ē' => 'e', 'ģ' => 'g', 'ī' => 'i', 'ķ' => 'k', 'ļ' => 'l', 'ņ' => 'n',
        'š' => 's', 'ū' => 'u', 'ž' => 'z'
    ];

    $str = preg_replace(array_keys($options['replacements']), $options['replacements'], $str);

    if ($options['transliterate']) $str = str_replace(array_keys($char_map), $char_map, $str);

    $str = preg_replace('/[^\p{L}\p{Nd}]+/u', $options['delimiter'], $str);
    $str = preg_replace('/(' . preg_quote($options['delimiter'], '/') . '){2,}/', '$1', $str);
    $str = mb_substr($str, 0, ($options['limit'] ? $options['limit'] : mb_strlen($str, 'UTF-8')), 'UTF-8');
    $str = trim($str, $options['delimiter']);

    return $options['lowercase'] ? mb_strtolower($str, 'UTF-8') : $str;
}



function _content_encode($content = null)
{
    return htmlspecialchars($content, ENT_NOQUOTES | ENT_QUOTES);
}


function _content($content = null)
{
    $content = htmlspecialchars_decode($content);
    $content = str_replace('&quot;', '"', $content);
    $content = str_replace('&#039;', "'", $content);

    $max_img_width = _config('content.image.max_width') ? _config('content.image.max_width') : 800;

    if(preg_match_all("#<img.*?>#si", $content, $matches))
    {
        foreach($matches[0] as $match)
        {
            if(!preg_match_all("#<img.*?width.*?=>#si", $match))
            {
                $content = preg_replace("#<img(.*?)>#si", "<img width=\"$max_img_width\" $1>", $content);
            }
        }
    }

    $content = preg_replace("#<img(.*?)src.*?=.*?['\"]" . _config('app.url') . "(.*?)['\"](.*?)>#si", "<img$1src=\"$2\"$3>", $content);

    return $content;
}


function _r($array, $return = null){return print_r($array, $return);}



function _modal($modal_alias = false)
{
    if($modal_alias == false) return null;

    sys::allowable_parameter_values($modal_alias, ['search']);

    switch($modal_alias)
    {
        case 'search':
            return _render('system/app/views/sys/search/search.modal');
            break;
    }
}


function _404()
{
    try
    {
        header("HTTP/1.0 404 Not Found");

        $render = [];
        $render['layout'] = 'blank';

        echo _render('system/app/views/error/404', null, $render);
    }
    catch(Exception $e)
    {
        echo $e->getMessage();
    }
    finally
    {
        exit;
    }
}


function autoload_lib($class_name = null)
{
    global $files;

    $classes = $files['class']; // All Class Files
    $found   = preg_grep("/$class_name\.class(?:\.php)?$/si", $classes); // example.class.php
    $found   = array_values($found);

    if(count($found) > 0)
    {
        // File Path
        $class_path = $found[0];

        // Include Class File
        if(is_readable($class_path)) require_once($class_path);
    }
}
spl_autoload_register('autoload_lib');


function throw_exception($message = null, $code = null)
{
    //    logger::add($message);
    throw new Exception($message, $code);
}